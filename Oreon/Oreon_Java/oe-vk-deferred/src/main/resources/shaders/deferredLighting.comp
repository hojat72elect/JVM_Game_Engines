#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 2, local_size_y = 2) in;

layout (set = 1, binding = 0, rgba16f) uniform writeonly image2D defferedSceneImage;
layout (set = 1, binding = 1, rgba16f) uniform readonly image2DMS albedoSceneImage;
layout (set = 1, binding = 2, rgba32f) uniform readonly image2DMS worldPositionImage;
layout (set = 1, binding = 3, rgba16f) uniform readonly image2DMS normalImage;
layout (set = 1, binding = 4, rgba16f)   uniform readonly image2DMS specular_emission_diffuse_ssao_bloom_Image;
layout (set = 1, binding = 5, r16f) uniform readonly image2D sampleCoverageMask;

layout (set = 0, binding = 0, std140, row_major) uniform Camera{
	vec3 eyePosition;
	mat4 m_View;
	mat4 m_ViewProjection;
	vec4 frustumPlanes[6];
} camera;

layout (set = 2, binding = 0, std140, row_major) uniform DirectionalLight{
	vec3 direction;
	float intensity;
	vec3 ambient;
	vec3 color;
} directional_light;

layout (push_constant, std430, row_major) uniform pushConstants{
	int numSamples;
	float sightRangeFactor;
} constants;

const float zfar = 10000;
const float znear = 0.1;
const vec3 fogColor = vec3(0.65,0.85,0.9);
const int shadowsEnable = 0;

float diffuse(vec3 direction, vec3 normal, float intensity)
{
	return max(0.0, dot(normal, -direction) * intensity);
}

float specular(vec3 direction, vec3 normal, vec3 eyePosition, vec3 vertexPosition, float specularFactor, float emissionFactor)
{
	vec3 reflectionVector = normalize(reflect(direction, normal));
	vec3 vertexToEye = normalize(eyePosition - vertexPosition);
	
	float specular = max(0.0, dot(vertexToEye, reflectionVector));
	
	return pow(specular, specularFactor) * emissionFactor;
}

float getFogFactor(float dist)
{
	return -0.0002/constants.sightRangeFactor*(dist-(zfar)/10.0*constants.sightRangeFactor) + 1;
}

void main(void){

	ivec2 computeCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	
	vec3 finalColor = vec3(0,0,0);
	vec3 albedo = vec3(0,0,0);
	vec3 position = vec3(0,0,0);
	vec3 normal = vec3(0,0,0);
	vec4 sspecular_emission_diffuse_ssao_bloom = vec4(0);
	vec3 depth = vec3(0,0,0);
	
	float diff = 1;
	float shadow = 1;
	float spec = 1;
	
	if(imageLoad(sampleCoverageMask, computeCoord).r == 1.0){
		
		for (int i=0; i<constants.numSamples; i++){
			
			albedo = imageLoad(albedoSceneImage, computeCoord,i).rgb; 
			normal = imageLoad(normalImage, computeCoord,i).rbg; 
			
			// prevent lighting atmosphere
			if (normal != vec3(0,0,0)){
				position = imageLoad(worldPositionImage, computeCoord,i).rgb; 
				sspecular_emission_diffuse_ssao_bloom = imageLoad(specular_emission_diffuse_ssao_bloom_Image, computeCoord,i).rgba; 
				
				spec = specular(directional_light.direction, normal.xyz, camera.eyePosition, position, sspecular_emission_diffuse_ssao_bloom.r,
					sspecular_emission_diffuse_ssao_bloom.g);
				
				// if (shadowsEnable == 1)
					// shadow = applyShadowMapping(position);
				
				int diffuseEnable = int(sspecular_emission_diffuse_ssao_bloom.z/10.0);
				float ssao = 1;
				// float ssao = sspecular_emission_diffuse_ssao_bloom.z - (diffuseEnable * 10);
				
				// if (ssao == 1 && ssaoEnable == 1)
					// ssao = imageLoad(ssaoBlurImage, computeCoord).r;
				// else
					// ssao = 1;
				
				if (diffuseEnable == 0)
					normal.xyz = vec3(0,1,0);
				
				diff = diffuse(directional_light.direction, normal.xyz, directional_light.intensity);
				vec3 diffuseLight = directional_light.ambient + vec3(1) * diff * shadow;
				vec3 specularLight = directional_light.color * spec;
				
				vec3 sampleColor = albedo * diffuseLight * ssao + specularLight;
					
				float dist = length(camera.eyePosition - position);
				float fogFactor = getFogFactor(dist);
				finalColor += mix(fogColor, sampleColor, fogFactor);
			}
			else{
				finalColor += albedo;
			}
		}
		
		finalColor /= constants.numSamples;
	}
	else {
		albedo = imageLoad(albedoSceneImage, computeCoord,0).rgb;
		normal = imageLoad(normalImage, computeCoord,0).rbg;
		
		if (normal != vec3(0,0,0)){
			position = imageLoad(worldPositionImage, computeCoord,0).rgb;
			sspecular_emission_diffuse_ssao_bloom = imageLoad(specular_emission_diffuse_ssao_bloom_Image, computeCoord,0).rgba;
		
			spec = specular(directional_light.direction, normal.xyz, camera.eyePosition, position, sspecular_emission_diffuse_ssao_bloom.r,
				sspecular_emission_diffuse_ssao_bloom.g);
			
			// if (shadowsEnable == 1)
				// shadow = applyShadowMapping(position);
			
			int diffuseEnable = int(sspecular_emission_diffuse_ssao_bloom.z/10.0);
			float ssao = 1;
			// float ssao = sspecular_emission_diffuse_ssao_bloom.z - (diffuseEnable * 10);
			
			// if (ssao == 1 && ssaoEnable == 1)
				// ssao = imageLoad(ssaoBlurImage, computeCoord).r;
			// else
				// ssao = 1;
			
			if (diffuseEnable == 0)
				normal.xyz = vec3(0,1,0);
				
			diff = diffuse(directional_light.direction, normal.xyz, directional_light.intensity);
			vec3 diffuseLight = directional_light.ambient + vec3(1) * diff * shadow;
			vec3 specularLight = directional_light.color * spec;
			
			finalColor = albedo * diffuseLight * ssao + specularLight;
				
			float dist = length(camera.eyePosition - position);
			float fogFactor = getFogFactor(dist);
			finalColor = mix(fogColor, finalColor, fogFactor);
		}
		else{
			finalColor = albedo;
		}
	}
	
	imageStore(defferedSceneImage, computeCoord, vec4(finalColor,1.0));
}